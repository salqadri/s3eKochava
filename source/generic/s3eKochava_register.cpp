/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eKochava_autodefs.h"
#include "s3eEdk.h"
#include "s3eKochava.h"
//Declarations of Init and Term functions
extern s3eResult s3eKochavaInit();
extern void s3eKochavaTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eKochavaCreate_wrap(const char* appId)
{
    IwTrace(KOCHAVA_VERBOSE, ("calling s3eKochava func on main thread: s3eKochavaCreate"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eKochavaCreate, 1, appId);
}

static void s3eKochavaEvent_wrap(const char* eventName, const char* eventData)
{
    IwTrace(KOCHAVA_VERBOSE, ("calling s3eKochava func on main thread: s3eKochavaEvent"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eKochavaEvent, 2, eventName, eventData);
}

static void s3eKochavaEventSpatial_wrap(const char* eventName, int x, int y, int z, const char* eventData)
{
    IwTrace(KOCHAVA_VERBOSE, ("calling s3eKochava func on main thread: s3eKochavaEventSpatial"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eKochavaEventSpatial, 5, eventName, x, y, z, eventData);
}

static void s3eKochavaDeepLinkEvent_wrap(const char* uri)
{
    IwTrace(KOCHAVA_VERBOSE, ("calling s3eKochava func on main thread: s3eKochavaDeepLinkEvent"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eKochavaDeepLinkEvent, 1, uri);
}

static void s3eKochavaEnableDebug_wrap(bool value)
{
    IwTrace(KOCHAVA_VERBOSE, ("calling s3eKochava func on main thread: s3eKochavaEnableDebug"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eKochavaEnableDebug, 1, value);
}

static void s3eKochavaSetErrorDebug_wrap(bool value)
{
    IwTrace(KOCHAVA_VERBOSE, ("calling s3eKochava func on main thread: s3eKochavaSetErrorDebug"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eKochavaSetErrorDebug, 1, value);
}

#define s3eKochavaCreate s3eKochavaCreate_wrap
#define s3eKochavaEvent s3eKochavaEvent_wrap
#define s3eKochavaEventSpatial s3eKochavaEventSpatial_wrap
#define s3eKochavaDeepLinkEvent s3eKochavaDeepLinkEvent_wrap
#define s3eKochavaEnableDebug s3eKochavaEnableDebug_wrap
#define s3eKochavaSetErrorDebug s3eKochavaSetErrorDebug_wrap

#endif

void s3eKochavaRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[6];
    funcPtrs[0] = (void*)s3eKochavaCreate;
    funcPtrs[1] = (void*)s3eKochavaEvent;
    funcPtrs[2] = (void*)s3eKochavaEventSpatial;
    funcPtrs[3] = (void*)s3eKochavaDeepLinkEvent;
    funcPtrs[4] = (void*)s3eKochavaEnableDebug;
    funcPtrs[5] = (void*)s3eKochavaSetErrorDebug;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[6] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("s3eKochava", funcPtrs, sizeof(funcPtrs), flags, s3eKochavaInit, s3eKochavaTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eKochavaStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eKochavaRegisterExt;
    return 0;
}

int g_s3eKochavaVal = s3eKochavaStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eKochavaRegisterExt();
}
#endif

#endif
